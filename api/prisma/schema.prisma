generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  password String
  name String
  phoneNumber String?

  emailVerified Boolean @default(false)

  emailVerifications EmailVerification[]
  logs Logs[]
  forgotPasswordTokens ForgotPasswordToken[]
  files File[]
  userOrganizations UserOrganization[]
  userEvents UserEvent[]

  emailPreferences EmailPreferences?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  suspended Boolean @default(false)
}

model EmailPreferences {
  id String @id @default(cuid())

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  login Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Logs {
  id String @id @default(cuid())

  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  emailId String?
  email Email? @relation(fields: [emailId], references: [id], onDelete: Cascade)

  organizationId String?
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  userOrganizationId String?
  userOrganization UserOrganization? @relation(fields: [userOrganizationId], references: [id], onDelete: Cascade)

  userEventId String?
  userEvent UserEvent? @relation(fields: [userEventId], references: [id], onDelete: Cascade)

  eventId String?
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)

  type LogType
  ip String?

  data Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Email {
  id String @id @default(cuid())
  messageId String
  from String
  to String
  subject String

  userId String?

  responses EmailWebhooks[]

  logs Logs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailVerification {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailWebhooks {
  id String @id @default(cuid())
  messageId String

  emailId String
  email Email @relation(fields: [emailId], references: [id], onDelete: Cascade)

  data String
  type EmailWebhookType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ForgotPasswordToken {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  active Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EmailWebhookType {
  DELIVERY
  OPEN
  BOUNCE
  SPAM_COMPLAINT
  LINK_CLICK
}

// LogTypes are in form NOUN_VERB
enum LogType {
  USER_CREATED
  USER_LOGIN
  USER_PASSWORD_RESET_REQUEST
  USER_PASSWORD_RESET
  USER_EMAIL_VERIFICATION_RESENT
  USER_ACCOUNT_UPDATED
  USER_EMAIL_PREFERENCES_UPDATED
  EMAIL_SENT
  EMAIL_VERIFIED
  ORG_CREATED
  ORG_UPDATED
  ORG_DELETED
  USER_ASSIGNED_TO_ORG
  USER_REMOVED_FROM_ORG
  USER_ORG_TYPE_CHANGED
}

model Geolocation {
  id String @id @default(cuid())
  ip String @unique
  city String
  regionName String
  createdAt DateTime @default(now())
}

model File {
  id String @id @default(cuid())

  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  key String
  originalname String
  mimetype String
  contentType String
  size Int
  location String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationIcon   Organization? @relation("OrganizationIcon")
  organizationEvent  Event? @relation("EventIcon")
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Here is the code for the actual application, not the underlying application engine (JackStack) //
////////////////////////////////////////////////////////////////////////////////////////////////////

enum AccountType {
  MANAGER
  OWNER
}

model UserOrganization {
  id String @id @default(cuid())
  type AccountType

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs Logs[]
}

model Organization {
  id String @id @default(cuid())
  name String
  email String
  privateEmail String?
  website String?
  description String?
  address String?

  iconId String? @unique
  icon         File? @relation("OrganizationIcon", fields: [iconId], references: [id], onDelete: SetNull)

  users UserOrganization[]
  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs Logs[]
}

enum UserEventType {
  OWNER
  MANAGER
  INVITED
}

model UserEvent {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  type UserEventType @default(INVITED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs Logs[]
}

model Event {
  id String @id @default(cuid())
  name String
  shortName String
  email String
  website String?

  iconId String? @unique
  icon         File? @relation("EventIcon", fields: [iconId], references: [id], onDelete: SetNull)

  organizationId String
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  registrationFormFields VolunteerRegistrationFormField[]

  users UserEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  logs Logs[]
}

model VolunteerRegistrationFormField {
  id String @id @default(cuid())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  sortIndex Int

  label String
  hint String?
  description String?
  icon String?

  required Boolean @default(false)

  type VolunteerRegistrationFormFieldType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VolunteerRegistrationFormFieldType {
  TEXT
  STRING
}