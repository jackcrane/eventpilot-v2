import { useState } from "react";
import { Page } from "../../../../../components/page/Page";
import { sidenavItems } from "../../../../../components/sidenav/Sidenav";
import { Dropzone } from "../../../../../components/dropzone/Dropzone";
import { Typography, Input, Spinner, Button, Alert } from "tabler-react-2";
import { useNavigate, useParams } from "react-router-dom";
import { useOrganization } from "../../../../../hooks/useOrganization";
import { useEvents } from "../../../../../hooks/useEvents";
import { Row } from "../../../../../util/Flex";
const { H1, H3, Text } = Typography;

export const NewEvent = () => {
  const [newEvent, setNewEvent] = useState({});
  const { orgId } = useParams();
  const { organization, loading } = useOrganization({ id: orgId });

  const { mutationLoading, mutationError, createEvent } = useEvents({
    orgId,
  });

  const navigate = useNavigate();

  const errorIncludes = (path) => {
    const error = mutationError?.raw?.error || {};
    if (!error || !error.issues) return false;
    return error.issues.some((issue) => issue.path.includes(path));
  };

  return (
    <Page title="New Event" sidenavItems={sidenavItems("")}>
      <H1>New Event</H1>
      <Text>
        Create a new event to manage everything related to your event.
      </Text>

      {mutationError && (
        <Alert title="Unable to create event" variant="danger">
          {mutationError.message}
        </Alert>
      )}

      <H3>Event Name</H3>
      <Input
        placeholder="Event Name"
        className="mb-1"
        value={newEvent.name}
        onInput={(value) => setNewEvent({ ...newEvent, name: value })}
        variant={errorIncludes("name") ? "danger" : "default"}
      />
      <Text>
        This is the name of your event that will be displayed to the public. It
        will be on your public profile, any events you create, public-facing
        marketing content, and communcations through our platform. If you have a
        short or secondary name for your event, it should not be used here.
      </Text>

      <H3>Event Short Name</H3>
      <Input
        placeholder="Event Short Name"
        className="mb-1"
        value={newEvent.shortName}
        onInput={(value) => setNewEvent({ ...newEvent, shortName: value })}
        variant={errorIncludes("shortName") ? "danger" : "default"}
      />
      {newEvent.shortName?.toLowerCase()?.replaceAll(" ", "-") !==
        newEvent.shortName && (
        <Text className="text-warning mb-2">
          Your short name contains spaces or dashes. It will be converted to{" "}
          <b>{newEvent.shortName?.toLowerCase()?.replaceAll(" ", "-")}</b>.
        </Text>
      )}
      <Text className="mb-2">
        This is the short name of your event that will be displayed to the
        public. It will be on your public profile, any events you create,
        public-facing marketing content, and communcations through our platform.
        This should be a very short name that will be used for things like URLs
        and slugs. If your event's short name contains spaces, the spaces will
        be replaced with dashes, and will be converted to lowercase.
      </Text>
      <Text>
        <b>This could be challenging to change later.</b> Changing this later
        could leave your users with broken links. Please be thoughtful about
        what you choose for your short name.
      </Text>

      <H3>Event Icon</H3>
      <Dropzone
        mb={"mb-1"}
        onSuccessfulUpload={({ id }) =>
          setNewEvent({ ...newEvent, iconId: id })
        }
      />
      <Text>
        This is the icon that will be displayed on your public profile and any
        events you create. This will also be used in any marketing content that
        you create, and in autogenerated communications with your event
        contacts.
      </Text>

      <H3>Event Public Contact Email</H3>
      <Input
        placeholder="Event Public Contact Email"
        className="mb-1"
        value={newEvent.email}
        onInput={(value) => setNewEvent({ ...newEvent, email: value })}
        variant={errorIncludes("email") ? "danger" : "default"}
      />
      <Text>
        This is the email address that the public can use to contact your event.
        This will be displayed on your public profile and any events you create.
        This will also be used in any marketing content that you create, and in
        autogenerated communications with your event contacts. We will direct
        your event contacts to this email address if they have questions or need
        to reach out to you regarding anything about the event.
      </Text>
      <Text>
        You can choose to leave this blank and we will autofill it with the
        email associated with your organization (
        <i>{organization.email || <Spinner size="sm" />}</i>
        ).
      </Text>

      <H3>Event Website</H3>
      <Input
        placeholder="Event Website"
        className="mb-1"
        value={newEvent.website}
        onInput={(value) => setNewEvent({ ...newEvent, website: value })}
        variant={errorIncludes("website") ? "danger" : "default"}
      />
      <Text>
        If you have a website for your event, you can enter it here. This will
        be displayed and linked on your public profile and any events you
        create. This will also be used in any marketing content that you create,
        and in autogenerated communications with your event contacts.
      </Text>

      {mutationError && (
        <Alert title="Unable to create event" variant="danger">
          {mutationError.message}
        </Alert>
      )}

      <Row justify="flex-end" gap={2}>
        <Button
          variant="primary"
          onClick={() =>
            createEvent(newEvent, (id) => {
              if (id) {
                navigate(`/organization/${orgId}/event/${id}`);
              }
            })
          }
          loading={mutationLoading}
        >
          Create Event
        </Button>
      </Row>
    </Page>
  );
};
